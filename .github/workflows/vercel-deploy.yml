name: Vercel Serverless Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Validate serverless entry point
      run: node -c src/index-serverless.js
    
    - name: Validate Vercel configuration
      run: |
        echo "üîç Validating Vercel serverless deployment..."
        
        # Check vercel.json exists and is valid
        if [ ! -f vercel.json ]; then
          echo "‚ùå vercel.json not found"
          exit 1
        fi
        echo "‚úÖ vercel.json exists"
        
        # Check serverless entry point exists
        if [ ! -f src/index-serverless.js ]; then
          echo "‚ùå src/index-serverless.js not found"
          exit 1
        fi
        echo "‚úÖ Serverless entry point exists"
        
        # Validate vercel.json references correct serverless file
        if ! grep -q "src/index-serverless.js" vercel.json; then
          echo "‚ùå vercel.json doesn't reference src/index-serverless.js"
          exit 1
        fi
        echo "‚úÖ vercel.json properly configured for serverless"
        
        # Show current configuration
        echo "üìã Current vercel.json configuration:"
        cat vercel.json
        
        echo ""
        echo "üéØ Deployment target: Vercel Serverless Functions"
        echo "üìÅ Entry point: src/index-serverless.js"
        echo "üö´ File operations: Removed for serverless compatibility"

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Deploy to Vercel
      if: ${{ secrets.VERCEL_TOKEN }}
      run: |
        echo "üöÄ Deploying HexSyn Server to Vercel..."
        DEPLOYMENT_URL=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
        echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Live URL: $DEPLOYMENT_URL"
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    - name: Display Deployment Info
      if: ${{ secrets.VERCEL_TOKEN }}
      run: |
        echo "================================================"
        echo "üéâ HEXSYN SERVER DEPLOYED SUCCESSFULLY!"
        echo "================================================"
        echo "üåê Live URL: ${{ env.DEPLOYMENT_URL }}"
        echo "üîó API Endpoints:"
        echo "   ‚Ä¢ Health: ${{ env.DEPLOYMENT_URL }}/api/health"
        echo "   ‚Ä¢ Email: ${{ env.DEPLOYMENT_URL }}/api/email/send-application"
        echo "   ‚Ä¢ SMTP Test: ${{ env.DEPLOYMENT_URL }}/api/email/test-connection"
        echo "üîç Monitor: https://vercel.com/dashboard"
        echo "================================================"
    
    - name: Setup Instructions
      if: ${{ !secrets.VERCEL_TOKEN }}
      run: |
        echo "‚ö†Ô∏è Automatic deployment skipped - Vercel secrets not configured"
        echo ""
        echo "üîß To enable GitHub Actions ‚Üí Vercel deployment:"
        echo "1. Get Vercel Token: https://vercel.com/account/tokens"
        echo "2. Go to: GitHub repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions"
        echo "3. Add these secrets:"
        echo "   ‚Ä¢ VERCEL_TOKEN"
        echo "   ‚Ä¢ VERCEL_ORG_ID (from .vercel/project.json)"
        echo "   ‚Ä¢ VERCEL_PROJECT_ID (from .vercel/project.json)"
        echo ""
        echo "üöÄ Manual deployment: vercel --prod"
        echo "üìã Current status: Validation passed, ready for deployment"
