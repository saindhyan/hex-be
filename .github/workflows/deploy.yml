name: Deploy to Vercel Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Create .env for testing
      run: |
        echo "NODE_ENV=test" > .env
        echo "PORT=5000" >> .env
        echo "SMTP_HOST=smtp.gmail.com" >> .env
    
    - name: Test serverless entry point
      run: node -c src/index-serverless.js
    
    - name: Test original entry point  
      run: node -c src/index.js
    
    - name: Validate Vercel configuration
      run: |
        echo "üîç Validating Vercel deployment setup..."
        
        # Check vercel.json exists
        if [ ! -f vercel.json ]; then
          echo "‚ùå vercel.json not found"
          exit 1
        fi
        echo "‚úÖ vercel.json exists"
        
        # Check serverless entry point exists
        if [ ! -f src/index-serverless.js ]; then
          echo "‚ùå src/index-serverless.js not found"
          exit 1
        fi
        echo "‚úÖ Serverless entry point exists"
        
        # Validate vercel.json points to correct file
        if ! grep -q "src/index-serverless.js" vercel.json; then
          echo "‚ùå vercel.json doesn't reference src/index-serverless.js"
          exit 1
        fi
        echo "‚úÖ vercel.json properly configured"
        
        # Show configuration
        echo "üìã Current vercel.json:"
        cat vercel.json
    

  deploy-vercel:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Deploy to Vercel Production
      if: ${{ secrets.VERCEL_TOKEN }}
      run: |
        echo "üöÄ Deploying to Vercel Production..."
        DEPLOYMENT_URL=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes)
        echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Production URL: $DEPLOYMENT_URL"
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    - name: Display Deployment Information
      if: ${{ secrets.VERCEL_TOKEN }}
      run: |
        echo "================================================"
        echo "üéâ DEPLOYMENT SUCCESSFUL!"
        echo "================================================"
        echo "üåê Live URL: ${{ env.DEPLOYMENT_URL }}"
        echo "üîç Vercel Dashboard: https://vercel.com/dashboard"
        echo "üìä Health Check: ${{ env.DEPLOYMENT_URL }}/api/health"
        echo "================================================"
    
    - name: Missing Vercel Secrets
      if: ${{ !secrets.VERCEL_TOKEN }}
      run: |
        echo "‚ö†Ô∏è Vercel deployment skipped - missing secrets"
        echo ""
        echo "üìù To enable automatic Vercel deployment:"
        echo "1. Go to GitHub repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions"
        echo "2. Add the following secrets:"
        echo "   - VERCEL_TOKEN (from vercel.com/account/tokens)"
        echo "   - VERCEL_ORG_ID (from .vercel/project.json)"
        echo "   - VERCEL_PROJECT_ID (from .vercel/project.json)"
        echo ""
        echo "üöÄ Manual deployment: vercel --prod"


        