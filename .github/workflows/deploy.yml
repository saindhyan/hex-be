name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Create .env for testing
      run: |
        echo "NODE_ENV=test" > .env
        echo "PORT=5000" >> .env
        echo "SMTP_HOST=smtp.gmail.com" >> .env
        echo "SMTP_PORT=587" >> .env
        echo "SMTP_USER=test@example.com" >> .env
        echo "SMTP_PASS=testpass" >> .env
        echo "FROM_NAME=Test" >> .env
        echo "FROM_EMAIL=test@example.com" >> .env
        echo "REPLY_TO_EMAIL=test@example.com" >> .env
        echo "ADMIN_EMAIL=admin@example.com" >> .env
        echo "JWT_SECRET=test-secret-key" >> .env
    
    - name: Run health check
      run: |
        npm start &
        SERVER_PID=$!
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1
        kill $SERVER_PID
    
    - name: Run tests
      run: npm test || echo "No tests configured - skipping"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install --production
    
    - name: Build Docker image
      run: |
        docker build -t hexsyn-server:${{ github.sha }} .
        docker tag hexsyn-server:${{ github.sha }} hexsyn-server:latest
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 5001:5000 \
          -e NODE_ENV=test \
          -e PORT=5000 \
          -e SMTP_HOST=smtp.gmail.com \
          -e SMTP_PORT=587 \
          -e SMTP_USER=test@example.com \
          -e SMTP_PASS=testpass \
          -e FROM_NAME=Test \
          -e FROM_EMAIL=test@example.com \
          -e REPLY_TO_EMAIL=test@example.com \
          -e ADMIN_EMAIL=admin@example.com \
          -e JWT_SECRET=test-secret-key \
          hexsyn-server:latest
        sleep 20
        curl -f http://localhost:5001/api/health || exit 1
        docker stop test-container
        docker rm test-container
    
    - name: Save Docker image
      run: docker save hexsyn-server:latest | gzip > hexsyn-server.tar.gz
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ github.sha }}
        path: hexsyn-server.tar.gz
        retention-days: 7

  deploy-vercel:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    - name: Deploy Project Artifacts to Vercel
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image-${{ github.sha }}
    
    - name: Load Docker image
      run: docker load < hexsyn-server.tar.gz
    
    - name: Deploy to Railway (Example)
      if: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "Deploying to Railway..."
        # Add Railway deployment commands here
        echo "Railway deployment would go here"
    
    - name: Deploy to DigitalOcean (Example)
      if: ${{ secrets.DO_TOKEN }}
      run: |
        echo "Deploying to DigitalOcean..."
        # Add DigitalOcean deployment commands here
        echo "DigitalOcean deployment would go here"
    
    - name: Deploy notification
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🐳 Docker image: hexsyn-server:${{ github.sha }}"
        echo "🌐 Available deployment options configured"
